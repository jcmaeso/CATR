function [] = model_fun(filename,freq,monitors,mesh_options,sim_options)
%UNTITLED Summary of this function goes here
%   Detailed explanation goes here
baseTriang1 = 9;
baseTriang2 = 5;
htriang1 = 8;
htriang2 = 5;
maxBox = 600;
repetition_factor = [8,8]; %X-Y Repetition Factor

triang = triangle_unit(baseTriang1,baseTriang2,htriang1,htriang2,[0,0]);
%triang = [0, 0; 9, 0];
def_profile = build_profile_from_form_xy(triang,[8,8]);
%plot(def_profile(:,1),def_profile(:,2));
%axis([-max(max(def_profile)) max(max(def_profile)) -max(max(def_profile)) max(max(def_profile))])

%Reflector Parameters
D = max(def_profile(:,2))-min(def_profile(:,2));
C = 50;
F = 150;
ReflectorThickness = 2;
cp = C-D/2;
tilt = atand((D+cp)/(2*F))+atand(cp/(2*F));
%Simulation Parametes
frequency_min = freq-1;  %Ghz
frequency_max = freq;  %Ghz

units_vba = sprintf(['With Units\n',...
    '.Geometry "%s"\n',...
    '.Frequency "%s"\n',...
    '.Time "%s"\n',...
    '.TemperatureUnit "%s"\n',...
    '.Voltage "V"\n',...
    '.Current "A"\n',...
    '.Resistance "Ohm"\n',...
    '.Conductance "Siemens"\n',...
    '.Capacitance "PikoF"\n',...
    '.Inductance "NanoH"\n',...
    'End With' ],"cm","ghz","s","kelvin");


cst = actxserver('CSTStudio.Application');
mws = invoke(cst, 'NewMws');
%Units Setter
addToCstHistory(mws,"Set Something",units_vba);
%Solver to integral
changeSolver2Integral(mws,"Integral Solver");
%Set frequency range
setFrequencyRange(mws,'Frequency Range',[frequency_min,frequency_max]) %In GHz
%Parameter Setter
invoke(mws, 'StoreParameter','maxBox',maxBox);
invoke(mws, 'StoreParameter','D',D);
invoke(mws, 'StoreParameter','C',C);
invoke(mws, 'StoreParameter','F',F);
invoke(mws, 'StoreParameter','tilt',-tilt);
invoke(mws, 'StoreParameter','ReflectorThickness',ReflectorThickness);
createPolygon3D(mws,"Create expand line","frame","frame",["0","0","0";"0","0","maxBox"])
solid_frame_names = [];
%Create and extrude curves
for i = 1:4
    createPolygonfromPoints(mws,"Create Polygon Outline","border",sprintf("border%d",i),def_profile(((i-1)*length(def_profile)/4+1):i*length(def_profile)/4,:));
    sweepCurve(mws,sprintf("Sweep Border %d",i),sprintf("border%d",i),"Vacuum",sprintf("border%d",i),"frame");
    solid_frame_names = [solid_frame_names sprintf("component1:border%d",i)];
end
%Add all solids
for i = 2:4
    addSolids(mws,sprintf("Adding solid frame %d",i),solid_frame_names(1),solid_frame_names(i));
end
%Move Offset
translateSolid(mws,"Apply offset",solid_frame_names(1),["0" "C", "0"]);
%Thickenning
thickenSheet(mws,"ThickenSheet",solid_frame_names(1),0.1);
%Create the parabola
createAnanlyticalCurve(mws,"Create Parabola Curve","parabola","paraboloid",["0","t","t^2/(4*F)"],[0,200]);
createCircleXY(mws,"Create Parabola circle","circle","paraboloid",[0, 0],2);
sweepCurve(mws,"Create Paraboloid","paraboloid","PEC","paraboloid:parabola","paraboloid:circle");
%Insert Paraboloid and profile
insertSolids(mws,'Insert Paraboloid',"component1:paraboloid",solid_frame_names(1));
splitShape(mws,"Split Reflector","paraboloid","component1");
%Delete estra solids
solidDelete(mws,"Delete Excess of parabola","paraboloid_1","component1");
solidDelete(mws,"Delete border","border1","component1");
%Thicken Reflector
thickenSheet(mws,"Thicken Reflector","component1:paraboloid","ReflectorThickness")
%extrudeCurve(mws,"Extrude Profile","extruded_border","border:reflector",-800);

%Local WCS to focus
activateLocalWCS(mws,"Change to Local WCS");
moveLocalWCS2Focus(mws,"Focus WCS",["0.0","0.0","F"],"tilt");
%Add Farfield sources
createFarFieldSource(mws,"Farfield source 1","ffs","1",fullfile(pwd,"farfieldsources30-120.ffs"));

%Simulation Bounding Box
activateGlobalWCS(mws,"Return to global WCS")
createPolygon3D(mws,"Create expand line X","framex","frame",["-55","0","0";"55","0","0"]);
createPolygon3D(mws,"Create expand line Y","framey","frame",["0","-10","0";"0","110","0"]);

%Add Field Monitors
%setMonitorEFieldVolume(mws,"Efield Monitors Volume",30,120,10,["-50","0","100";"50","100","300"]);
for i= 1:length(monitors)
     setMonitorEFieldPlane(mws,sprintf("EField Monitor %f",monitors(i)),freq,[-1, 1,0, 100],monitors(i));
end
%Simulation Setup
sim = "simParametersLow.txt";
if sim_options == "med"
    sim = "simParametersMed.txt";
end
simulationSetup(mws,"Sim Setup",sim);
%Change mesh according to frequency
%1000x1000 cells
meshSetup(mws,"Meshing","meshParameters.txt",mesh_options)
%Save File
mws.invoke('saveas',filename,'false');
%Start Solver
%solver = invoke(mws, 'FDSolver');
%invoke(solver, 'start');
mws.invoke('quit');
end

function[] = createPolygonfromPoints(mws,command,name,curve_name,points)
    point_list = sprintf('.LineTo "%0.5f","%0.5f" \n',points(2:end,:).');
    polygon_vba = sprintf(['With Polygon\n',...
        '.Reset \n',...
        '.Name "%s" \n',...
        '.Curve "%s" \n'...
        '.Point "%0.5f", "%0.5f" \n',...
        '%s',...
        '.Create \n'... 
        'End With' ],name,curve_name,points(1,1),points(1,2),point_list);
    addToCstHistory(mws,command,polygon_vba);
end

function[] = extrudeCurve(mws,command,solid_name,targetcurve,thickness)
    extrude_curve_vba = sprintf(['With ExtrudeCurve\n',...
        '.Reset \n',...
        '.Name "%s" \n',...
        '.Component "component1" \n'...
        '.Material "PEC" \n'...
        '.Thickness "%f" \n'...
        '.Twistangle "0.0" \n'...
        '.Taperangle "0.0" \n'...
        '.Curve "%s" \n'...
        '.Create \n'... 
        'End With' ],solid_name,thickness,targetcurve);
    addToCstHistory(mws,command,extrude_curve_vba);
end


function[] = createPolygon3D(mws,command,name,curve_name,points)
    point_list = sprintf('.Point "%s","%s","%s" \n',arrayfun(@sprintf_float2str,points.'));
    polygon_vba = sprintf(['With Polygon3D\n',...
        '.Reset \n',...
        '.Name "%s" \n',...
        '.Curve "%s" \n'...
        '%s',...
        '.Create \n'... 
        'End With' ],name,curve_name,point_list);
    addToCstHistory(mws,command,polygon_vba);
end

function[] = sweepCurve(mws,command,solid_name,material,target_curve,path)
    sweepcurve_vba = sprintf(['With SweepCurve\n',...
        '.Reset \n',...
        '.Name "%s" \n',...
        '.Component "component1" \n',...
        '.Material "%s" \n',...
        '.Twistangle "0.0" \n',...
        '.Taperangle "0.0" \n',...
        '.ProjectProfileToPathAdvanced "False" \n',...
        '.DeletePath "False" \n',...
        '.Path "%s" \n',...
        '.Curve "%s" \n',...
        '.Create \n',... 
        'End With' ],solid_name,material,path,target_curve);
    addToCstHistory(mws,command,sweepcurve_vba);
end

function[] = addSolids(mws,command,solid_name1,solid_name2)
    addToCstHistory(mws,command,sprintf('Solid.Add "%s", "%s"\n',solid_name1,solid_name2));
end

function[] = insertSolids(mws,command,solid_name1,solid_name2)
    addToCstHistory(mws,command,sprintf('Solid.Insert "%s", "%s"\n',solid_name1,solid_name2));
end

function[] = solidDelete(mws,command,solid_name,component)
    addToCstHistory(mws,command,sprintf('Solid.Delete "%s:%s"\n',component,solid_name));
end

function[] = translateSolid(mws,command,solid_name,transform_vector)
transform_vector = arrayfun(@sprintf_float2str,transform_vector);
translateSolid_vba = sprintf(['With Transform\n',...
        '.Reset \n',...
        '.Name "%s" \n',...
        '.Vector "%s", "%s", "%s" \n',...
        '.UsePickedPoints "False" \n',...
        '.InvertPickedPoints "False" \n',...
        '.GroupObjects "False" \n',...
        '.MultipleSelection "False" \n',...
        '.Transform "Shape", "Translate" \n',...
        'End With' ],solid_name,transform_vector(1),transform_vector(2),transform_vector(3));
    addToCstHistory(mws,command,translateSolid_vba);
end

function[] = createAnanlyticalCurve(mws,command,name,name_curve,laws,parameter_range)
    parameter_range = arrayfun(@sprintf_float2str,parameter_range);
    analyticalCurve_vba = sprintf(['With AnalyticalCurve\n',...
            '.Reset \n',...
            '.Name "%s" \n',...
            '.Curve "%s" \n',...
            '.LawX "%s" \n',...
            '.LawY "%s" \n',...
            '.LawZ "%s" \n',...
            '.ParameterRange "%s", "%s" \n',...
            '.Create \n',...
            'End With' ],name,name_curve,laws(1),laws(2),laws(3),parameter_range(1),parameter_range(2));
    addToCstHistory(mws,command,analyticalCurve_vba);
end

function[] = thickenSheet(mws,command,name,width)
    thicken_vba = sprintf('Solid.ThickenSheetAdvanced "%s", "Outside", "%s", "True"',name,num2str(width));
    addToCstHistory(mws,command,thicken_vba);
end

function[] = splitShape(mws,command,name,component)
    splitshape_vba = sprintf('Solid.SplitShape "%s", "%s"',name,component);
    addToCstHistory(mws,command,splitshape_vba);
end

function[] = createCircleXY(mws, command, name, name_curve,center,radius)
    center = arrayfun(@sprintf_float2str,center);
    radius = arrayfun(@sprintf_float2str,radius);
    circlexy_vba = sprintf(['With Circle\n',...
            '.Reset \n',...
            '.Name "%s" \n',...
            '.Curve "%s" \n',...
            '.Xcenter "%s" \n',...
            '.Ycenter "%s" \n',...
            '.Radius "%s" \n',...
            '.Segments "0" \n',...
            '.Create \n',...
            'End With' ],name,name_curve,center(1),center(2),radius);
    addToCstHistory(mws,command,circlexy_vba);
end

function[] = createFarFieldSource(mws,command,name,id,filepath)
        farfield_import_vba = sprintf(['With FarfieldSource\n',...
            '.Reset \n',...
            '.Name "%s" \n',...
            '.Id "%s" \n'...
            '.UseCopyOnly "true" \n'...
            '.SetPosition "0", "0", "0" \n',...
            '.SetTheta0XYZ "0", "0", "1" \n',...
            '.SetPhi0XYZ "1", "0", "0" \n',...
            '.Import "%s" \n',...
            '.UseMultipoleFFS "false" \n',...
            '.SetAlignmentType "currentwcs" \n'...
            '.SetMultipoleDegree "1" \n'...
            '.SetMultipoleCalcMode "automatic" \n'...
            '.Store \n'...
            'End With' ],name,id,filepath);
        addToCstHistory(mws,command,farfield_import_vba);
        
end

function[] = changeSolver2Integral(mws,command)
    addToCstHistory(mws,command,'ChangeSolverType "HF IntegralEq"');
end

function[] = activateLocalWCS(mws,command)
    addToCstHistory(mws,command,'WCS.ActivateWCS "local"');
end

function[] = activateGlobalWCS(mws,command)
    addToCstHistory(mws,command,'WCS.ActivateWCS "global"');
end

function[] = moveLocalWCS2Focus(mws,command,coordinates,tilt)
    addToCstHistory(mws,sprintf("%s(Movement)",command),sprintf('WCS.MoveWCS "local", "%s", "%s", "%s"',arrayfun(@sprintf_float2str,coordinates)));
    addToCstHistory(mws,sprintf("%s(tilt-v)",command),'WCS.RotateWCS "v", "180"');
    addToCstHistory(mws,sprintf("%s(tilt-u)",command),sprintf('WCS.RotateWCS "u", "%s"',num2str(tilt)));
end

function[] = setFrequencyRange(mws,command,frequencies)
    frequencies = arrayfun(@sprintf_float2str,frequencies);
    addToCstHistory(mws,sprintf("%s",command),sprintf('Solver.FrequencyRange "%s", "%s"',frequencies(1),frequencies(2)));
end

function[] = setMonitorEFieldPlane(mws,command,freq,plane_zone,z)
        farfield_import_vba = sprintf(['With Monitor\n',...
            '.Reset \n',...
            '.Name "e-field (f=%d;z=%d)" \n'...
            '.Dimension "Volume"  \n',...
            '.Domain "Frequency" \n',...
            '.FieldType "Efield"  \n',...
            '.UseSubvolume "True" \n',...
            '.Coordinates "Free"  \n',...
            '.SetSubvolume "%f", "%f", "%f", "%f", "-2.9316524078422", "15.723665948778"  \n',...
            '.SetSubvolumeOffset "0.0", "0.0", "0.0", "0.0", "0.0", "0.0"   \n',...
            ' .SetSubvolumeInflateWithOffset "False"   \n',...
            ' .PlaneNormal "z"   \n',...
            ' .PlanePosition "%f" \n'...
            '.MonitorValue "%f" \n'...
            '.Create \n'...
            'End With' ],[freq,z,plane_zone,z,freq]);
        addToCstHistory(mws,command,farfield_import_vba);
end


